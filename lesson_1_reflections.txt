How did viewing a diff between two versions of a file help you see the bug that was introduced?

    I was very surprised that there is a built-in tool into my machine where I compare files. Previously, I used online comparing tools which were useful but required a third party. 

How could having easy access to the entire history of a file make you a moreefficient programmer in the long term?

    Having a backlog of files helps find bugs and additionally helps with redundancy and reduces the risk of file loss. Saving variations of files often allows programmers to backtrack as a failsafe. It is important to note that there are different methods and many tools to implement version control.

What do you think are the pros and cons of manually choosing when to create a commit, like you do in Git, vs having versions automatically saved, like Google docs does?

    Pros: Being able to view a save point when it was meaningful rather than viewing all of the changes. A commit allows users to set points of reference with the save point which are useful when reviewing previous versions.
    Cons: More Work...but this saves time in the long run and allows others to view your workthrough process. Additionally, as a manual save with commits, you may save too often or too few of times.

Why do you think some version control systems, like Git, allow saving multiple
files in one commit, while others, like Google Docs, treat each file separately?

  It is beneficial to track multiple file changes because as projects grow, interconnectivitiy between those files also change. Having the ability to track them in a repository helps to track the functionality changes to the project. You still have the ability to contribute a single commit, however all files in the repository will reflect that change.

How can you use the commands git log and git diff to view the history of files?

    Using git log, you can view all of the variations of saved files in chronological order. These contain useful information of author and when the commit was saved. Git diff is a useful command because it allows you to view the changes between two or more file changes. 

How might using version control make you more confident to make changes that could break something?

    Version control allows more confident developing environments to happen because of being able to break out the code to finite details. Having this tool in your arsenal allows developers to be agile and revert back to changes or find bugs faster and efficiently. Additionally with version control you are able to explore and experiment incrementally with your code without worry that you could do something massively harming to the project. 

Now that you have your workspace set up, what do you want to try using Git for?

    Although the terminal is not meant for coding files I am happy that I was able to connect my editor (Brackets) with the terminal and correct bash profile. This will help me better manage my workflow with version control an regular maintenance on web pages. Looking forward to using Git.